// Mocks generated by Mockito 5.4.6 from annotations
// in movie_recommendation_app/test/unit/services/authentication_service_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:movie_recommendation_app/data/datasources/tmdb_client.dart'
    as _i3;
import 'package:movie_recommendation_app/data/models/movie.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeMovie_0 extends _i1.SmartFake implements _i2.Movie {
  _FakeMovie_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TMDbClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockTMDbClient extends _i1.Mock implements _i3.TMDbClient {
  MockTMDbClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Movie>> getMovieRecommendations({
    List<String>? genres,
    int? page = 1,
    String? sortBy = 'popularity.desc',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getMovieRecommendations, [], {
              #genres: genres,
              #page: page,
              #sortBy: sortBy,
            }),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Movie>> getMovieBasedRecommendations(
    int? movieId, {
    int? page = 1,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getMovieBasedRecommendations,
              [movieId],
              {#page: page},
            ),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Genre>> getGenres() =>
      (super.noSuchMethod(
            Invocation.method(#getGenres, []),
            returnValue: _i4.Future<List<_i2.Genre>>.value(<_i2.Genre>[]),
          )
          as _i4.Future<List<_i2.Genre>>);

  @override
  _i4.Future<_i2.Movie> getMovieDetails(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#getMovieDetails, [movieId]),
            returnValue: _i4.Future<_i2.Movie>.value(
              _FakeMovie_0(
                this,
                Invocation.method(#getMovieDetails, [movieId]),
              ),
            ),
          )
          as _i4.Future<_i2.Movie>);

  @override
  _i4.Future<List<_i2.Movie>> searchMovies(String? query, {int? page = 1}) =>
      (super.noSuchMethod(
            Invocation.method(#searchMovies, [query], {#page: page}),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<String> createRequestToken() =>
      (super.noSuchMethod(
            Invocation.method(#createRequestToken, []),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createRequestToken, []),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<String> createSession(String? approvedToken) =>
      (super.noSuchMethod(
            Invocation.method(#createSession, [approvedToken]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createSession, [approvedToken]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<bool> rateMovie(int? movieId, double? rating, String? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#rateMovie, [movieId, rating, sessionId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> deleteMovieRating(int? movieId, String? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMovieRating, [movieId, sessionId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.Movie>> getRatedMovies(
    int? accountId,
    String? sessionId, {
    int? page = 1,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getRatedMovies,
              [accountId, sessionId],
              {#page: page},
            ),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Movie>> getWatchlistMovies(
    int? accountId,
    String? sessionId, {
    int? page = 1,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getWatchlistMovies,
              [accountId, sessionId],
              {#page: page},
            ),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<Map<String, dynamic>> getAccountDetails(String? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#getAccountDetails, [sessionId]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
